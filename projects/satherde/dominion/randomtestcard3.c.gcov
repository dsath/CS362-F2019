        -:    0:Source:randomtestcard3.c
        -:    0:Graph:randomtestcard3.gcno
        -:    0:Data:randomtestcard3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:///////////////////////////////////////////
        -:    2:// Baron Unit Tests
        -:    3://////////////////////////////////////////
        -:    4:
        -:    5:
        -:    6://int baron_func(struct gameState *state, int currentPlayer, int choice1);
        -:    7:
        -:    8:#include <stdio.h> 
        -:    9:#include <string.h> 
        -:   10:#include <math.h>
        -:   11:#include <stdlib.h>
        -:   12:#include "dominion.h"
        -:   13:#include "dominion_helpers.h"
        -:   14:#include "rngs.h"
        -:   15:
        -:   16:
        -:   17:int tribute_func_test(struct gameState *state, int currentPlayer, int nextPlayer, int *tributeRevealedCards); 
        -:   18:
function main called 1 returned 100% blocks executed 100%
        1:   19:int main() {
        1:   20:	int k[10] = { adventurer, council_room, feast, gardens, mine
        -:   21:	, remodel, smithy, village, baron, great_hall };
        -:   22:	struct gameState G;
        -:   23:	int
        -:   24:	coppers[MAX_HAND];
        -:   25:	int
        -:   26:	silvers[MAX_HAND];
        -:   27:	int
        -:   28:	golds[MAX_HAND];
        1:   29:	memset(&G, 0, sizeof(struct gameState));
        -:   30:	
        1:   31:	int i = 0;
        1:   32:	int j = 0;
     1001:   33:	for( i = 0; i < 1000; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   34:
     1000:   35:		initializeGame(2, k, rand(), &G);
call    0 returned 100%
call    1 returned 100%
  1001000:   36:		for( j = 0; j < 1000; j++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1000000:   37:			if(rand() % 100 == 2) {
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
     9945:   38:				G.deckCount[1] = 0;
        -:   39:			}
  1000000:   40:			int tributeRevealedCards[2] = {-1, -1};
  1000000:   41:			tribute_func_test(&G, 0, 1, tributeRevealedCards);
call    0 returned 100%
        -:   42:		}
        -:   43:	}
        -:   44:
        1:   45:	return 0;
        -:   46:}
        -:   47:
function tribute_func_test called 1000000 returned 100% blocks executed 80%
  1000000:   48:int tribute_func_test(struct gameState *state, int currentPlayer, int nextPlayer, int *tributeRevealedCards) {
  1000000:   49:	int i = 0;
  1000000:   50:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   997062:   51:            if (state->deckCount[nextPlayer] > 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   52:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:   53:                state->deckCount[nextPlayer]--;
        -:   54:            }
   997062:   55:            else if (state->discardCount[nextPlayer] > 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   56:                tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:   57:                state->discardCount[nextPlayer]--;
        -:   58:            }
        -:   59:            else {
        -:   60:                //No Card to Reveal
        -:   61:                if (DEBUG) {
        -:   62:                    printf("No cards to reveal\n");
        -:   63:                }
        -:   64:            }
        -:   65:        }
        -:   66:
        -:   67:        else {
     2938:   68:            if (state->deckCount[nextPlayer] == 0) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   69:                for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:   70:                    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:   71:                    state->deckCount[nextPlayer]++;
    #####:   72:                    state->discard[nextPlayer][i] = -1;
    #####:   73:                    state->discardCount[nextPlayer]--;
        -:   74:                }
        -:   75:
    #####:   76:                shuffle(currentPlayer, state);//Shuffle the deck
call    0 never executed
        -:   77:            }
     2938:   78:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     2938:   79:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     2938:   80:            state->deckCount[nextPlayer]--;
     2938:   81:            tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     2938:   82:            state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     2938:   83:            state->deckCount[nextPlayer]--;
        -:   84:        }
        -:   85:
  1000000:   86:        if (tributeRevealedCards[0] == tributeRevealedCards[1]) { //If we have a duplicate card, just drop one
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   998109:   87:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
   998109:   88:            state->playedCardCount++;
   998109:   89:            tributeRevealedCards[1] = -1;
        -:   90:        }
        -:   91:
  4000000:   92:        for (i = 0; i <= 2; i ++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
  3000000:   93:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) { //Treasure cards
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     2519:   94:                state->coins -= 2;
        -:   95:            }
        -:   96:
  2997481:   97:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) { //Victory Card Found
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
     1340:   98:                drawCard(currentPlayer, state);
call    0 returned 100%
     1340:   99:                drawCard(currentPlayer, state);
call    0 returned 100%
        -:  100:            }
        -:  101:            else { //Action Card
  2996141:  102:                state->numActions = state->numActions + 2;
        -:  103:            }
        -:  104:        }
        -:  105:
  1000000:  106:        return 0;
        -:  107:}
